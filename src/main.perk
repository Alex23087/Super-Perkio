import "stdio.h"
import "time.h"
import "SDL2/SDL.h"

extern printf : (char*, ...) -> int
extern clock : () -> int
extern CLOCKS_PER_SEC: int

extern SDL_WINDOWPOS_CENTERED : int
extern SDL_RENDERER_ACCELERATED : int
extern SDL_WINDOW_SHOWN : int
extern SDL_INIT_VIDEO : int
extern SDL_PIXELFORMAT_RGBA8888 : int
extern SDL_TEXTUREACCESS_TARGET : int
extern SDL_FLIP_NONE : int

let ground_green := (0, 150, 0, 255)
let sky_blue := (0, 128, 255, 255)
let shite_my_pantalogno := (74, 65, 42, 255)
let perwinkle := (142, 130, 254, 255)
let perkio_red := (255, 0, 0, 255)

let CLOCKS_PER_MSEC := CLOCKS_PER_SEC / 1000
let target_framerate := 1./60.
let window_size := (800, 600)

fun clamp (x: float, min: float, max: float) : float {
    if (cast(int, x < min)) {
        return min;
    } else {if (cast(int, x > max)) {
        return max;
    } else {
        return x;
    }}
}

fun lerp (v1 : (float * float), v2 : (float * float), alpha : float) : (float * float) {
    return (v1[0] * (1. - alpha) + v2[0] * alpha, v1[1] * (1. - alpha) + v2[1] * alpha)
}

fun vsum (v1 : (float * float), v2 : (float * float)) : (float * float) {
    return (v1[0] + v2[0], v1[1] + v2[1]);
}

model Window { let oops : int = 0 }
model Renderer { let oops : int = 0 }

model Rect {
    let pos : (float * float) = (0.0, 0.0),
    let size : (float * float) = (0.0, 0.0),

    fun constructor (pos: (float * float), size: (float * float)) : void {
        self.pos = pos;
        self.size = size;
    }
}

model SDL {
    let window : Window? = nothing,
    let renderer : Renderer? = none,

    fun init (x: int): int {
        BEGIN_C
        return SDL_Init(x);
        END_C
    },

    fun create_window (title: char*, x: int, y: int, w: int, h: int, flags: int): void {
        let _w : Window = self.window!;
        let set: int = 0;
        BEGIN_C
        _w = (void*) SDL_CreateWindow(title, x, y, w, h, flags);
        set = (int) _w;
        END_C;
        if (set) {
            self.window = some _w;
        }
    },

    fun get_error () : char* {
        BEGIN_C
        return SDL_GetError();
        END_C;
    },

    fun set_renderer_draw_color_tup (colour: (int * int * int * int)) : void {
        self.set_renderer_draw_color(colour[0], colour[1], colour[2], colour[3]);
    },
    
    fun set_renderer_draw_color (a : int, b : int, c : int, d : int) : void {
        let _r : Renderer = self.renderer!;
        BEGIN_C
        SDL_SetRenderDrawColor((SDL_Renderer*)_r, a, b, c, d); // 0, 128, 255, 255 for Blue background
        END_C
    },
    
    fun render_clear () : void {
        let _r : Renderer = self.renderer!;
        BEGIN_C
        SDL_RenderClear((SDL_Renderer*)_r);
        END_C
    },

    fun render_present () : void {
        let _r : Renderer = self.renderer!;
        BEGIN_C
        SDL_RenderPresent((SDL_Renderer*)_r);
        END_C
    },

    fun create_renderer (a : int, b : int) : void {
        let _r : Renderer = self.renderer!;
        let _w : Window = self.window!;
        let set : int = 0;
        BEGIN_C
        _r = (void*)SDL_CreateRenderer((SDL_Window*)_w, a, b);
        set = (int) _r;
        END_C;
        if (set) {
            self.renderer = some _r;
        }
    },

    fun destroy_window () : void {
        let _w :Window = self.window!;
        BEGIN_C
        SDL_DestroyWindow((SDL_Window*)_w);
        END_C
    },

    fun quit () : void {
        BEGIN_C
        SDL_Quit();
        END_C
    },

    fun render_fill_rect (rect: Rect) : void {
        let x := rect.pos[0];
        let y := rect.pos[1];
        let w := rect.size[0];
        let h := rect.size[1];

        let _r : Renderer = self.renderer!;
        BEGIN_C
        SDL_Rect _rect = { x, y, w, h };
        SDL_RenderFillRect((SDL_Renderer*)_r, &_rect);
        END_C
    },

    fun delay (ms: int) : void {
        BEGIN_C
        SDL_Delay(ms);
        END_C
    },

    fun create_texture (format : int, access : int, w : int, h : int) : SDL_Texture* { 
        let _r : Renderer = self.renderer!;
        BEGIN_C
        return SDL_CreateTexture((SDL_Renderer*)_r, format, access, w, h);
        END_C;
    },

    fun set_render_target (texture: SDL_Texture*) : void {
        let _r : Renderer = self.renderer!;
        BEGIN_C
        SDL_SetRenderTarget((SDL_Renderer*)_r, (SDL_Texture*)texture);
        END_C
    },

    fun set_render_target_none () : void {
        let _r : Renderer = self.renderer!;
        BEGIN_C
        SDL_SetRenderTarget((SDL_Renderer*)_r, 0);
        END_C
    },

    fun render_copy_ex (texture: SDL_Texture*, rect: Rect, angle: float, center: (float * float), flip: int) : void {
        let _r : Renderer = self.renderer!;
        BEGIN_C
        // Relying on the underlying implementation of rects is not a good idea.
        // The best way would be to unpack it in perkelang and then pass it to C.
        SDL_Rect _rect = { rect->pos._0, rect->pos._1, rect->size._0, rect->size._1 };
        SDL_Point _center = { center._0, center._1 };
        SDL_RenderCopyEx((SDL_Renderer*)_r, (SDL_Texture*)texture, 0, &_rect, angle, &_center, flip);
        END_C
    }
}


archetype Drawable {
    position : (float * float),
    rotation : float,
    texture : SDL_Texture*,
    size : (float * float)
}

archetype PhysicsObject {
    position : (float * float),
    rotation: float,
    velocity: (float * float),
    angular_velocity: float,
    bounciness: float,
    friction: float,
    is_grounded: int
}

model Perkio: Drawable, PhysicsObject {
    let position: (float * float) = (200.,200.),
    let velocity: (float * float) = (0., 0.),
    let angular_velocity: float = 0.0,
    let bounciness: float = 0.5,
    let friction: float = 0.5,
    let rotation: float = 0.0,
    let is_grounded: int = 0,
    let texture: SDL_Texture* = cast(SDL_Texture*, 0), // unsafe!!!!!!

    let size : (float * float) = (20., 40.),

    fun constructor (sdl : SDL) : void {
        self.texture = sdl.create_texture(SDL_PIXELFORMAT_RGBA8888, SDL_TEXTUREACCESS_TARGET, cast(int,self.size[0]), cast(int, self.size[1]));
        sdl.set_render_target(self.texture);
        sdl.set_renderer_draw_color_tup (perkio_red);
        
        sdl.render_clear();
        // let rect := summon Rect((self.position[0] - 10., self.position[1] - 40.), (20., 40.));
        // sdl.render_fill_rect(rect);
        // banish rect;
        
        sdl.set_render_target_none();
    },

    fun draw (sdl : SDL) : void {
        let rect := summon Rect((self.position[0] - self.size[0], self.position[1] - self.size[1]), (self.size[0], self.size[1]));
        sdl.render_copy_ex(self.texture, rect, self.rotation, (self.size[0] / 2., self.size[1] / 2.), SDL_FLIP_NONE);
        banish rect;
    }
}

model Strozno: Drawable, PhysicsObject {
    let position: (float * float) = (400.,200.),
    let size: (float * float) = (20.,40.),

    let texture := cast(SDL_Texture*, 0), // unsafe!!!!!!

    let velocity: (float * float) = (0., 0.),
    let angular_velocity: float = 0.0,
    let bounciness: float = 0.9,
    let friction: float = 0.5,
    let rotation: float = 0.0,
    let is_grounded: int = 0,

    fun constructor (sdl : SDL) : void {
        self.texture = sdl.create_texture(SDL_PIXELFORMAT_RGBA8888, SDL_TEXTUREACCESS_TARGET, cast(int,self.size[0]), cast(int, self.size[1]));
        sdl.set_render_target(self.texture);
        sdl.set_renderer_draw_color_tup (shite_my_pantalogno);
        sdl.render_clear();
        sdl.set_render_target_none();
    }
}

// let dummyPerkio := summon Perkio()
// let dummyDrawable : <Drawable> = (dummyPerkio ~> Drawable)

model List {
    let head : <Drawable+PhysicsObject>? = nothing,
    let tail : List? = none,

    fun push_head (x: <Drawable+PhysicsObject>) : List {
        if (!self.head?){
            self.head = some x;
            return self;
        }else{
            let newList := summon List();
            newList.head = some x;
            newList.tail = self;
            return newList;
        }
    },

    fun push_tail (x: <Drawable+PhysicsObject>) : void {
        let newList := summon List();
        newList.head = some x;
        let current := self;
        while (current.tail?) {
            current = current.tail!;
        };
        current.tail = newList;
    },

    fun foreach (f : (<Drawable+PhysicsObject>) => void) : void {
        if (self.head?) {
            f(self.head!);
            if (self.tail?) {
                self.tail!.foreach(f);
            }
        }
    }
}

model PhysicsManager {
    let world_bounds : Rect = summon Rect((0., 0.), (800., 500.)),
    let gravity : (float * float) = (0., 9.81),

    fun update_physics_obj (delta_t: float, obj: <Drawable+PhysicsObject>) : void {
        self.move(obj, obj.velocity[0], obj.velocity[1]);
        obj.rotation = obj.rotation + obj.angular_velocity * cast(float, delta_t);
    },

    fun update_physics (delta_t: float, objs: void*) : void {
        let list := cast(List, objs);

        list.foreach((d : <Drawable+PhysicsObject>) : void {
            self.accelerate(d, 0., cast(float, self.gravity[1]) * (cast(float, delta_t)));
            self.update_physics_obj(delta_t, d);
        });
    },
    
    fun accelerate (obj: <Drawable+PhysicsObject>, dirx: float, diry: float) : void {
        obj.velocity[0] = obj.velocity[0] + dirx;
        obj.velocity[1] = obj.velocity[1] + diry;
    },

    fun angle_accelerate (obj: <Drawable+PhysicsObject>, acc_delta: float) : void {
        obj.angular_velocity = obj.angular_velocity + acc_delta;
    },

    fun move (obj: <Drawable+PhysicsObject>, dirx: float, diry: float) : void {
        obj.position[0] = obj.position[0] + dirx;

        if (cast(int, obj.position[1] + diry < 500.0)) {
            obj.is_grounded = 0;
            obj.position[1] = obj.position[1] + diry;
        }
        else {
            obj.is_grounded = 1;
            obj.position[1] = 500.0;
            obj.velocity[1] = -obj.velocity[1]*obj.bounciness;
            obj.velocity[0] = obj.velocity[0] * clamp(1. - obj.friction, 0., 1.);
            // printf("BOUNCE! %f\n", 1. - obj.friction);
            //self.angle_accelerate(obj, obj.velocity[0] * 6000. * delta_t);
            obj.angular_velocity = obj.velocity[0] * 500.;
        }
    }
}

model Camera {
    let position : (float * float) = (0.,0.),
    
    fun draw_background (sdl : SDL) : void {
        // draw sky
        sdl.set_renderer_draw_color_tup (sky_blue);
        sdl.render_clear();

        // draw ground
        sdl.set_renderer_draw_color_tup (ground_green);
        let rect := summon Rect((0., - self.position[1] +400. + cast(float, window_size[1] / 2)), (cast(float, window_size[0]), cast(float, window_size[1])));
        sdl.render_fill_rect(rect);
        banish rect;
    },

    fun draw (sdl : SDL, obj : <Drawable+PhysicsObject>) : void {
        let rect := summon Rect((obj.position[0] - obj.size[0] - self.position[0] + cast(float, window_size[0] / 2), obj.position[1] - obj.size[1] - self.position[1] + cast(float, window_size[1] / 2)), (obj.size[0], obj.size[1]));
        sdl.render_copy_ex(obj.texture, rect, obj.rotation, (obj.size[0] / 2., obj.size[1] / 2.), SDL_FLIP_NONE);
        banish rect;
    }
}

model GameController {
    let state : List = summon List(),

    let world_bounds := summon Rect((0., 0.), (800., 500.)),
    let gravity : (float * float) = (0., 1.),
    let physics_manager : PhysicsManager = summon PhysicsManager(),

    let camera : Camera = summon Camera(),

    fun loop (sdl : SDL, delta_t: float) : void {


        self.camera.draw_background(sdl);

        self.physics_manager.update_physics(delta_t, cast(void*, self.state));
        
        self.state.foreach((d : <Drawable+PhysicsObject>) : void {
            self.camera.draw(sdl, d);
        });


        sdl.render_present();
    }
}



fun main (): int {
    let sdl := summon SDL();

    if (sdl.init(SDL_INIT_VIDEO) < 0) {
        printf("SDL could not initialize! SDL_Error: %s\n", sdl.get_error());
        return 1;
    };
    
    sdl.create_window("Simple SDL Window",
                        SDL_WINDOWPOS_CENTERED,
                        SDL_WINDOWPOS_CENTERED,
                        window_size[0], window_size[1],
                        SDL_WINDOW_SHOWN);

    if (!sdl.window?) {
        printf("Window could not be created! SDL_Error: %s\n", sdl.get_error());
        sdl.quit();
        return 1;
    };

    sdl.create_renderer(-1, SDL_RENDERER_ACCELERATED);

    if (!sdl.renderer?) {
        printf("Renderer could not be created! SDL_Error: %s\n", sdl.get_error());
        sdl.destroy_window();
        sdl.quit();
        return 1;
    };

    let game := summon GameController();
    let perkio := summon Perkio(sdl);
    let strozno := summon Strozno(sdl);
    game.state = game.state.push_head((perkio ~> Drawable+PhysicsObject));
    game.state = game.state.push_head((strozno ~> Drawable+PhysicsObject));

    perkio.velocity = (0.5, -2.);

    let quit : int = 0;
    let before := 0;

    let pressed_l := 0.;
    let pressed_r := 0.; 
    let pressed_u := 0.;
    let pressed_d := 0.;

    while (!quit) {
        BEGIN_C
        SDL_Event e;
        while (SDL_PollEvent(&e)) {
            if (e.type == SDL_QUIT) {
                quit = 1;
            }
            if (e.type == SDL_KEYDOWN && e.key.repeat == 0) {
                if (e.key.keysym.sym == SDLK_w) {
                    END_C;
                    if (perkio.is_grounded == 1) {
                        perkio.velocity[1] = - 10.0;
                    };
                    pressed_u = 1.0;
                    BEGIN_C
                }
                if (e.key.keysym.sym == SDLK_a) {
                    END_C;
                    pressed_l = 1.0;
                    BEGIN_C
                }
                if (e.key.keysym.sym == SDLK_s) {
                    END_C;
                    pressed_d = 1.0;
                    BEGIN_C
                }
                if (e.key.keysym.sym == SDLK_d) {
                    END_C;
                    pressed_r = 1.0;
                    BEGIN_C
                }
            }

            if (e.type == SDL_KEYUP) {
                if (e.key.keysym.sym == SDLK_w) {
                    END_C;
                    pressed_u = 0.0;
                    BEGIN_C
                }
                if (e.key.keysym.sym == SDLK_a) {
                    END_C;
                    pressed_l = 0.0;
                    BEGIN_C
                }
                if (e.key.keysym.sym == SDLK_s) {
                    END_C;
                    pressed_d = 0.0;
                    BEGIN_C
                }
                if (e.key.keysym.sym == SDLK_d) {
                    END_C;
                    pressed_r = 0.0;
                    BEGIN_C
                }
            }
        }
        END_C;

        if(perkio.is_grounded) {
            pressed_d = 0.0;
        };

        perkio.velocity[0] = perkio.velocity[0] - (pressed_l * 1.0) + (pressed_r * 1.0);
        perkio.velocity[1] = perkio.velocity[1] + (pressed_d * 1.0);
        
        game.camera.position = lerp(game.camera.position, vsum(perkio.position, (0., -100.)), target_framerate * 2.);

        // printf("%f, %f\n", game.camera.position[0], game.camera.position[1]);

        if (cast(int, (perkio.velocity[0] > 7.0))) {
            perkio.velocity[0] = 7.0;
        };

        if (cast(int, (perkio.velocity[0] < -7.0))) {
            perkio.velocity[0] = -7.0;
        };
        

        let difference : float = cast(float, (clock() - before)) / cast(float, CLOCKS_PER_MSEC);
        
        let beginning_of_frame := clock();

        game.loop(sdl, target_framerate);
        let delay := cast(int, (target_framerate*1000.0 - difference));
        
        sdl.delay(cast(int, if delay >= 0 then delay else 0)); // ~60 FPS idle delay

        let frame_length := clock() - beginning_of_frame;
        //printf("%f\t%d\t%f\n", difference, delay, target_framerate);

        before = clock();
        
    };

    banish strozno;
    banish perkio;
    banish game;

    return 0;
}
